//-------------------------------------------------------------------------------
// TaskCalcZRVMod.cpp : 
// А. Николенко 13.12.2018
//
// Реализация функции реакции на обнаружения моделью движения факта наступления 
// на текущем шаге интегрирования одного из собятий ЗРВ - вход, выход или параметр
//-------------------------------------------------------------------------------
#include "stdafx.h"

//---------------------------------------------------------------------------
// Компоненты Fly
#include <FlyCore.h>		// Собственоно сама модель движения
#include <FlyMMath.h>		// Математические функции

//---------------------------------------------------------------------------
// Генерация структуры КА в виде набора НУ (Разбег)
#include <.\\Task\\RunUpSys\\RunUpSysBuild.h>		

#include "TaskCalcZRVDoc.h"		// Документирование результатов расчёта ЗРВ
#include "TaskCalcZRVMod.h"		// Надстройка над моделью движения для расчёта ЗРВ

extern IDTASKZRV IDZRV ;

//-------------------------------------------------------------------------------
void CompliteZRV(ZZRV& ZRV)
{
	if (ZRV.isFound!=7) return ;
	// Архивирование данных ЗРВ для дальнейшей сортировки и документирования
	AccumulationZRVData(ZRV) ;
	// Обнуление буфера
	memset(&ZRV, 0, sizeof(ZZRV)) ;
	ZRV.Nip =-1 ;
}

//-------------------------------------------------------------------------------
// Перегружаемая функция класса модели движения, вызываемая моделью движения
// каждый раз, когда вдоль шага интегриования определяется наличие того или
// иного события ЗРВ (вход, выход, параметр).
// Фунция вызывается после автоматического уточнения момента наступления данного 
// события.
//		ZMOD_EVENT E	- описание и характеристики события
//		ZSC_SI     FSC	- параметры движения КА на момент наступления события
//
int ZModZRV::OnZRVEvent(ZMOD_EVENT& E, ZSC_SI* FSC) 
{
	int i ;
	for(i=0; i<IDZRV.CountKA; i++) { if (NU.Key.ka==IDZRV.NumKA[i]) break ; }
	if (i==IDZRV.CountKA) assert(0) ;
	// Номер индекса НИПа из задания на решение
	int k = (int)E.Value5 ;
	// Массив характеристик расчитанной ЗРВ
	ZZRV* Z = &IDZRV.KA[i].EventMng.ZRV[k] ;
	// Признак события - вход, выход или параметр
	switch(E.ID) {
		case ModEvent_ZRVBEG:
		case ModEvent_ZRVEND:
		case ModEvent_ZRVPARAM:
			// Проверка завершения расчёта ЗРВ
			//		Z->isFound & 1 - вход в ЗРВ
			//		Z->isFound & 2 - параметр
			//		Z->isFound & 4 - выход из ЗРВ
			//		Z->isFound = 7 - параметры ЗРВ расчитаны полностью 
			if (Z->isFound==7) CompliteZRV(*Z) ;
			break ;
		default: assert(0) ;
	}
	return 0 ;
}

//------------------------------------------------------------------------------
