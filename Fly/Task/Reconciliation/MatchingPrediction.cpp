//-----------------------------------------------------------------------------
// MatchingPrediction.cpp
// Пример программы расчёта трассы полёта КА
//
// А. Николенко 23.04.2019
//-----------------------------------------------------------------------------
#include "stdafx.h"

//-----------------------------------------------------------------------------
// Компоненты Fly
#include <FlyCore.h>		// Модель движения

//-----------------------------------------------------------------------------
int MatchingPrediction()
{
	int rc = 0;
	// НУ 
	ZNU NU;

	cout << endl << "  Сверка прогнозирования парвметров движения КА." 
		 << endl << endl;

	// Загрузка НУ из УОФ НУ01 
	cout << "  НУ:" << endl;
	rc = LoadNU01("NU01_prognoz_003.txt", NULL, NULL, NU, nullptr, true);
	if (rc) return rc;
	NU.M0 = 420.0;
	NU.MF = 50.0;

	// Логическая шкала сил для решения задачи
	ZLSF LSF;
	LSF.num  = 1;
	LSF.vgpz = GPZ90;
	LSF.ngpz = 16;
	LSF.mgpz = 16;
	LSF.vatm = ATMNULL;
	LSF.vsvd = 0;
	LSF.varsp= 0;
	LSF.vTide = TIDENULL;
	LSF.isDU  = 0;
	LSF.isSun = false;
	LSF.isMoon = false;

	//-------------------------------------------------------------------------
	// Диспетчер документирования
	ZCPrintManager PrintMng;

	// Параметризация документирования результатов прогноза

	// Горизонтальное документирование
	PrintMng.MPK.AflatOn();
	// Документирование по времени.
	PrintMng.MPK.FromVitOff();
	PrintMng.MPK << MODPRDATE;
	PrintMng.MPK << MODPRTIME;
	PrintMng.MPK << MODPR_VIT;
	PrintMng.MPK << MODPR_T_RGSC;
	PrintMng.MPK << MODPR_T_VGSC;
	PrintMng.MPK << MODPR_Aosk;
	PrintMng.MPK << MODPR_eosk;

	//---------------------------------------------------------------------------
	ZMSC   *KA;		// Модель движения КА
	ZSC_SI SI;		// Структура для получения от модели элементов движения КА
	double t0,		// Время начала моделирования
		   tk,		// Время конца моделирования
		   t,		// Текущее время
		   h;		// Шаг моделирования
	DATETIMEDMB DTNU;
	DTNU << NU.t;
	DTNU << TIME(10, 0, 0, 0);
	h  = 600.0 / k_cbc;
	t0<< DTNU;
	tk = t0 + 4.0;
	t  = t0;
	
	// Создание в куче модели движения КА
	KA = new ZMSC; if (!KA) return-1;

	//---------------------------------------------------------------------------
	// Инициализация модели движения для расчёта от заданных НУ (NU)
	// в заданном поле сил (LSF)

	// Указание интегрировать с постоянным шагом в 60 секунд 
	//KA->PreInitInfo.defautFixedStep = 60.0;

	// Непосредственно сама инициализация модели движения
	rc = KA->Init(NU, &LSF); if (rc) return rc;

	//---------------------------------------------------------------------------
	// Создание текстового документа для документирования результатов прогноза
	PrintMng.PrePrint(KA, "Сверка прогноза", "_TaskMatchingPrediction_prognoz_003");
	// Заголовок текстового документа
	PrintMng.PrintHeaderDoc("\n   Сверка результатов прогнозирования\n\n");
	// Документирование НУ и логической шкалы сил
	PrintMng.PrintNU(NU, NULL, 3);
	PrintMng.PrintLSF(LSF, 1);

	//---------------------------------------------------------------------------
	// Основной цыкл моделирования 
	while (1) {
		// Условие завершение прогнозирования
		if (t > tk) break;

		// Прогноз на заданное время
		rc = KA->GoToTime(t, &SI); if (rc) break;

		// Документирование результатов прогноза 
		PrintMng.PrintMSC(KA, &SI, NULL, NULL);

		// Отображение даты и времени в консоли
		//cout << SI.Data << " " << SI.Time << endl;

		// Новое текущее время 
		t+= h;
	}
	cout << "\n";
	
	// Завершение документирования
	PrintMng.PostPrint();
	PrintMng.ClosePrint();

	return rc;
}

//-----------------------------------------------------------------------------