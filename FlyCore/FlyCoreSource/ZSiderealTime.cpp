//---------------------------------------------------------------------------
// ZSiderealTime.cpp
// А. Николенко 03.08.2018
//---------------------------------------------------------------------------
#include <stdafx.h>
#pragma   hdrstop
#include <FlyMMath.h>
#include <FlyTime.h>

#include <FlyCoreSource\\ModType.h>
#include <FlyCoreSource\\ModGlobal.h>
#include <FlyCoreSource\\ModAstro.h>
#include <FlyCoreSource\\ZCalc.h>
#include <FlyCoreSource\\ZSiderealTime.h>
#include <FlyCoreSource\\ZNut.h>

//----------------------------------------------------------------------------
// Функция расчета среднего звездного времени по всемирному времени UT1
// в сутках от 0 часов 01.01.2000.
// Результат  - в cутках (ССС).
//----------------------------------------------------------------------------
double ZAverageSiderealTime(double UT2000)
{
	// Перевод времени от 0h.01.01.2000 во время от J2000.0 (12h.01.01.2000)
	double StarTime = UT2000-0.5;
	// Перевод времени в Юлианские столетия
	double t = StarTime/36525.;
	// Расчет среднего звездного времени на 0 часов заданных суток UT2000
	// IERS Conventions 2000
	StarTime = 24110.54841 +
			   t*(8640184.812866 +
			   t*(0.093104 -
			   t*(6.2e-6))) ;

	//IERS Conventions 2010
	double StarTime1 = 67310.54841 +
			   t*((8640184.812866+3155760000) +
			   t*(0.093104 -
			   t*(6.2e-6))) ;

	// Расчет среднего звездного времени на заданное время UT2000
	StarTime = StarTime/86400.+UT2000;
	return (StarTime-floor(StarTime));
}

//----------------------------------------------------------------------------
// Программа расчета истинного звездного времени по всемирному 
// координированному ремени (UTC) в сутках от 0h 01.01.1975 г.  ???????
// На вход подается атомноге время в ссс от 0h 01.01.1975 г.
// Результат - ЗВ в радианах.
//----------------------------------------------------------------------------
int ZTrueSiderealTime(double t, double& zw)
{
	double dUTC, Nut[3] ;
	short  rc ;

	//if( k_Flag_Pvz) {	// Учет параметров вращения Земли
	//	if(( rc = Model_PVZ(t,nullptr,nullptr,&dUTC ) ) ) return rc ;
	//} else {			// Учет скачков времени из-за неравномерности вращения Земли
		// Тут dUTC - величина отрицательная 
	dUTC = GetLeapSeconds(t);
	//}

	// Расчет параметров нутации
	rc = ZNutJ2000(t, Nut, 0, TIME1975ASD) ; RRC ; 
	// Расчет среднего звездного времени
	zw = ZAverageSiderealTime(t+DELTA_2000+dUTC)*k_dwapi;
	// Учет нутации в долготе (прямом восхождении)
	zw+= cos(Nut[0]+Nut[2])*Nut[1] ;

	return S_OK ;
}

//----------------------------------------------------------------------------
// Функция расчета среднего звездного времени по всемирному времени UT1
// в сутках от 0 часов 01.01.2000.
// Результат  - в cутках (ССС).
//----------------------------------------------------------------------------
double Calc_AverageStarTime(double UT2000)
{
	double StarTime, Tau;
	// Перевод времени от 0h.01.01.2000 во время от J2000.0 (12h.01.01.2000)
	StarTime = UT2000 - 0.5;
	// Перевод времени в Юлианские столетия
	Tau = StarTime / 36525.;
	// Расчет среднего звездного времени на 0 часов заданных суток UT2000
	StarTime = (24110.54841 + (8640184.812866 + (0.093104 - 6.2e-6*Tau)*Tau)*Tau);
	// Расчет среднего звездного времени на заданное время UT2000
	StarTime = StarTime / 86400. + UT2000;
	return (StarTime - floor(StarTime));
}

//----------------------------------------------------------------------------
// Функция расчета истинного звездного времени по всемирному времени
// в ССС от нуля часов фундаментальной эпохи.
// Результат - в радианах.
//----------------------------------------------------------------------------
HRESULT Calc_StarTime(double dIAT, double *StarTime)
{
	HRESULT hCodRet;
	double Delta_T, Delta_N;
	// Учет скачков времени из-за неравномерности вращения Земли
	Delta_T = GetLeapSeconds(dIAT);
	// Расчет среднего звездного времени на заданное время
	Delta_T = Calc_AverageStarTime(dIAT + DELTA_2000 + Delta_T) * k_dwapi;
	// Расчет параметров нутации
	if ((hCodRet = AEJG(dIAT, 12)) != 0) return hCodRet;
	// Учет нутации в долготе (прямом восхождении)
	Delta_N = cos(Wae->qnu[0] + Wae->qnu[2])*Wae->qnu[1];
	// Формирование истинного звездного времени
	*StarTime = Delta_T + Delta_N;
	return S_OK;
}

//----------------------------------------------------------------------------
// Программа расчета истинного звездного времени по всемирному времени
// в сутках от нуля часов 01.01.1975 г. Результат - ЗВ в радианах.
//----------------------------------------------------------------------------
short FZW(double t, double *zw)
{
	double x, pz, tt;
	short  iCR;

	tt = t;
	//if( k_Flag_Pvz) { 
	// Учет параметров вращения Земли
	//	if(( iCR = Model_PVZ(t,nullptr,nullptr,&pz ) ) ) return iCR ;
	//} else { 
	// Учет скачков времени из-за неравномерности вращения Земли
	pz = GetLeapSeconds(tt);
	//}
	// Расчет параметров нутации
	if ((iCR = AEJG(t, 12))) return iCR;
	// Расчет среднего звездного времени
	t = Calc_AverageStarTime(tt + DELTA_2000 + pz) * k_dwapi;
	// Учет нутации в долготе (прямом восхождении)
	x = cos(Wae->qnu[0] + Wae->qnu[2]) * Wae->qnu[1];
	// Формирование истинного звездного времени
	*zw = t + x;
	return S_OK;
}

//----------------------------------------------------------------------------
// Расчет матрицы ПВЗ и ее производной
//----------------------------------------------------------------------------
int ZMER(double t, double* M, double* Ms)
{
	int rc ;
	double tt ; rc = ZTrueSiderealTime(t, tt) ; if(rc) return rc ;
	//if( k_Flag_Pvz) {
	//	if ( ( ko = Model_PVZ( t, &xp, &yp, nullptr ) ) ) return ko ; 
	//} else { xp = yp = 0.; }
	double xp = 0. ;
	double yp = 0. ;
	double cS=cos(tt);
	double sS=sin(tt);
	M[0]= cS;           M[1]= sS;           M[2]= xp;
	M[3]=-sS;           M[4]= cS;           M[5]=-yp;
	M[6]=-xp*cS-yp*sS;  M[7]=-xp*sS+yp*cS;  M[8]= 1.;
	if( Ms ) { 
		cS*= k_omega;
		sS*= k_omega;
		Ms[0] =-sS;           Ms[1] = cS;           Ms[2] =0.;
		Ms[3] =-cS;           Ms[4] =-sS;           Ms[5] =0.;
		Ms[6] = xp*sS-yp*cS;  Ms[7] =-xp*cS-yp*sS;  Ms[8] =0.;
	}
	return 0 ;
}

//----------------------------------------------------------------------------
