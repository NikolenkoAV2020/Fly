//-------------------------------------------------------------------------------
// ZNIP.cpp : 
// А. Николенко 26.11.2018
//
// Расчёт характеристик взаимной видимости КА-НИП 
//-------------------------------------------------------------------------------
#include <stdafx.h>

#include <FlyMMath.h>

#include <FlyCoreSource\\ModType.h>
#include <FlyCoreSource\\ModSK.h>
#include <FlyCoreSource\\ModGlobal.h>
#include <FlyCoreSource\\ZHBL.h>
#include <FlyCoreSource\\ZNIP.h>

//#define CALC_ZRV_PARAMS_IN_GSC

//-------------------------------------------------------------------------------
// Описение и координаты НИП
ZNIP ALLNIPS[] = {
// №   Тип  Название           Позывной         B,   					L,						H,		УМ макс,УМ мин, Коорд в		Матр перехода от ГСК 
//												рад						рад						км		град	град    ГСК, км		к топоцентрической СК
3,		1,	"НИП 3",			"Divan",		0.80091703999999997,	1.2848531999999999,		366.2,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
4,		1,	"НИП 4",			"Divan",		1.020111,				1.6103668,				 92.2,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
5,		2,	"СТАЦ МОСТ",		"XXXXXXXX",		0.82493471909193095,	0.69185336362736327,	 44.0,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,  
6,		1,	"НИП 6",			"Divan",		0.92659529988378964,	2.763564033881444,		 51.0,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
8,		1,	"НИП 8",			"Автовагон",	0.9452412340592623,		0.63596889060586714,	223.0,  88.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0, 
9,		1,	"НИП 9",			"Divan",		1.0443371504780514,		0.5269536862715769,		118.8,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,  
10,		1,	"НИП 10",			"Divan",		0.78639687958053384,	0.59152602045855585,	140.2,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
12,		1,	"НИП 12",			"Divan",		1.0180941859195924,		1.4466549356099891,		 89.1,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
13,		1,	"НИП 13",			"Divan",		0.90534591624075855,	1.8839617241076014,		622.4,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
14,		1,	"НИП 14",			"Divan",		0.97650686835401634,	0.6626481874773249,		170.2,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
15,		1,	"НИП 15",			"Divan",		0.76835211436963702,	2.2995779485123737,		 85.1,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
16,		1,	"НИП 16",			"Divan",		0.78930091353038001,	0.57900813121230776,	 34.7,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
17,		1,	"НИП 17",			"Divan",		1.0816629557866748,		2.2628048308002149,		116.9,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
18,		1,	"НИП 18",			"Divan",		1.1791153538265025,		1.1198711219949173,		248.2,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
19,		1,	"НИП 19",			"Divan",		0.99650686835401623,	0.6626481874773249,		170.2,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
20,		1,	"НИП 20",			"Divan",		0.88462013137332585,	2.3867232076918126,		232.79, 90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
21,		1,	"НИП 21",			"Divan",		0.6751709248603841,		1.1683767307899264,		2732.5, 90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
31,		1,	"НИП 31",			"Divan",		0.80121278567524135,	1.1054963963500195,		147.8,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
41,		1,	"НИП 41",			"Divan",		1.0978363401884887,		0.70793463342976659,	121.2,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
51,		1,	"ППИ2",				"Брудер",		0.90522956095729246,	1.8838599132345684,		655.0,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
61,		1,	"ЦППИ",				"Оборона",		0.96265089334790577,	0.67003674797743418,	208.0,  85.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
71,		0,	"НИП 71",			"Divan",		1.5700012323578769,		0.0,					  0.0,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
103,	2,	"ВМФ Севмор",		"Перспект.",	1.2054989143524832,		0.58337630247910466,	  0.0,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
104,	0,	"ЦППИ",				"Оборона",		0.96265089334790577,	0.67003674797743418,	208.0,  85.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
105,	2,	"ГМН",				"Ростов",		0.82466807156732069,	0.69231393662441731,	  0.0,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
106,	2,	"ЮП",				"XXXXXXXX",		0.9625490824748727,		0.67573815686728234,	106.0,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
472,	2,	"РКЦ ЦСКБ",			"Самара",		0.8780751466783473,		0.92903876083658155,	 70.0,  90.0,	5.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
542,	4,	"МОБ 21Б4",			"XXXXXXXX",		0.8250607706490195,		0.69176124902795244,	 90.0,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
552,	4,	"МОБ 21Б5",			"XXXXXXXX",		0.96265089334790577,	0.67003674797743418,	208.0,  60.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
555,	4,	"СТАЦ МОСТ",		"XXXXXXXX",		0.82493471909193095,	0.69185336362736327,	100.0,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
701,	4,	"Ханой",			"Скорпион",		0.36617007706841037,	1.8417344524829609,		 73.0,  90.0,	5.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
704,	4,	"Ханой 704",		"Скорпион",		0.36617007706840998,	1.84173445248296,		 73.0,  90.0,	5.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
1000,	2,	"Ханты-Мансийск",	"XXXXXXXX",		1.0647549999999999,		1.1518470000000001,		  0.0,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
1331,	4,	"Мост-тест",		"XXXXXXXX",		0.84549081917097524,	2.3565968855476656,		200.0,  90.0,	5.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
1332,	4,	"14Ф138 ПР-СИ",		"XXXXXXXX",		0.96265089334790599,	0.67003674797743396,	208.0,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
1333,	2,	"НТЦ Алмаз",		"XXXXXXXX",		0.96265089334790577,	0.67003674797743418,	208.0,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
1622,	2,	"ЦППИ",				"Оборона",		0.96265089334790577,	0.67003674797743418,	300.0,  85.0,	5.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
1632,	2,	"ППИ2",				"Брудер",		0.90522956095729235,	1.8838599132345684,		655.0,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
2002,	2,	"НЦОМЗ",			"XXXXXXXX",		0.97493607202722143,	0.65668497919967761,	200.0,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
2004,	11,	"МОБ ВМФ",			"XXXXXXXX",		0.099997669865652894,	0.099997669865652894,	208.0,  90.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
2005,	2,	"НИК ВМФ",			"Промысел",		0.9599989625122366,		0.67003674797743418,	208.0,  85.0,	7.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
2007,	2,	"Северодвинск",		"Полярный1",	1.1269590980127384,		0.68678706065976869,	200.0,  90.0,	5.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0,
2008,	2,	"Североморск",		"Полярный2",	1.2054989143524832,		0.58337630247910466,	200.0,  90.0,	5.0,	0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0, } ;

//-------------------------------------------------------------------------------
// Сравнение ЗРВ для их сортировки
bool operator < (ZZRV& Z1, ZZRV& Z2) { return Z1.t1<Z2.t1 ? true:false ; }  

//-------------------------------------------------------------------------------
// Расчёт параметров радиовидимости КА с НИП
// Дано:  
//		NIP		- НИП для которого рассчитываются параметры	
//		GSK		- координаты КА в ГСК  
// Результаты:
//		Params[0] - угол места, град
//		Params[1] - скорость изменения угла места, град/сек
//		Params[2] - дальность до КА, км
//		Params[3] - скорость измененич дальности км/сек
//		Params[4] - азимут, град
//
int CalcZRVParams(ZNIP *NIP, double* GSK, double* Params)
{
#ifdef CALC_ZRV_PARAMS_IN_GSC
	// !!!!!!!!!
	// Данный алгоритм имеет некоторую методическую ошибку вычисления
	// угла места и азимута
	// 
	//Радиус-вектор КА в ГСК
	double* R = &GSK[0] ;
	// Скорость КА в ГСК
	double* V = &GSK[3] ;

	// Координаты пункта в ГСК
	double* GSCNIP = &NIP->xyz[0] ; 
	if (GSCNIP[0] == 0 && GSCNIP[1] == 0 && GSCNIP[2] == 0) {
		// В характеристиках НИПов координаты задаются как HBL геодезические
		// При первом расчёте вычисляются гринвические координаты НИП (NIP->xyz) 
		// и матрица перехода от ГСК в топоцентрическую СК (NIP->gsc2tpc)
		// Вычисления производятся для общеземного эллипсоида
		double hbl[3] ;
		hbl[0] = NIP->H/1e7 ;	// Высоту переводим из м в дткм
		hbl[1] = NIP->B ;		// Широта, рад
		hbl[2] = NIP->L ;		// Долгота, рад
		ZGRtoHBL(GSCNIP, hbl, 1, 0, NIP->gsc2tpc, nullptr) ;
	}

	// Вектор НИП-КА
	double ro[3] ; 
	SubtractVector(R, GSCNIP, ro, 3) ;

	// Угол места
	double Gam ;
	double ro0[3] ; 
	double GSCNIP0[3] ; 
	NormVector(ro, ro0, 3) ;  
	NormVector(GSCNIP, GSCNIP0, 3) ;  
	double SR = MScalVector(GSCNIP0, ro0, 3) ;
	// Угол места в градусах
	Gam = 90.0-Acos(SR, 1) ;

	// Производная угла места 
	double V0[3] ; 
	NormVector(V, V0, 3) ;  
	double SV   = MScalVector(GSCNIP0, V0, 3) ;
	double SroV = MScalVector(ro0, V, 3) ;
	double Mro  = ModVector(ro, 3) ;
	double VR[3] ;
	for (int i=0; i<3; i++) VR[i] = (V[i]-ro0[i]*SroV)/Mro ;			
	// Производная угла места в рад/ссс 
	double dGam = 1.0/sqrt(1.0-SR*SR)*MScalVector(GSCNIP0, VR, 3) ;
	// Производная угла места в град/сек 
	dGam = TO_GRAD(dGam)/k_cbc ;

	// Дальность в км
	double D = TO_KM(ModVector(ro, 3)) ;  
	// Производная дальности в км/сек
	double dD = TO_KMS(MScalVector(ro0, V, 3)) ;  

	// Направление на север из центра земли 
	double Z0[3] = {0, 0, 1} ;
	// Направление на восток в топоцентрической СК
	double East[3] ; 
	MVector(Z0, GSCNIP0, East) ;  
	NormVector(East, East, 3) ;  
	// Направление на Север в топоцентрической СК
	double Nord[3] ; 
	MVector(GSCNIP0, East, Nord) ;  
	NormVector(Nord, Nord, 3) ;  
	double ProN = MScalVector(ro0, Nord, 3) ;
	double ProE = MScalVector(ro0, East, 3) ;
	// Азимут в градусах
	double A = ValiA(Atan2(-ProE, ProN, 1), 1) ;

	// Формирование массива результатов 
	Params[0] = Gam ;
	Params[1] = dGam ;
	Params[2] = D ;
	Params[3] = dD ;
	Params[4] = A ;
	Params[5] = 0 ;		// Углы ориентации антены 
	Params[6] = 0 ;		// КИС Куб-контур
#else
	PARAMETR_KA_NIP(GSK, NIP, Params) ;
#endif
	return 0 ;
}

//-------------------------------------------------------------------------------
void PARAMETR_KA_NIP(double *Gsk, ZNIP *NIP, double *PZ)
{
	if (NIP->xyz[0] == 0 && NIP->xyz[1] == 0 && NIP->xyz[2] == 0) {
		// В характеристиках НИПов координаты задаются как HBL геодезические
		// При первом расчёте вычисляются гринвические координаты НИП (NIP->xyz) 
		// и матрица перехода от ГСК в топоцентрическую СК (NIP->gsc2tpc)
		// Вычисления производятся для общеземного эллипсоида
		double hbl[3] ;
		hbl[0] = NIP->H/1e7 ;	// Высоту переводим из м в дткм
		hbl[1] = NIP->B ;		// Широта, рад
		hbl[2] = NIP->L ;		// Долгота, рад
		ZGRtoHBL(NIP->xyz, hbl, 1, 0, NIP->gsc2tpc, nullptr) ;
	}

	// Радиус-вектор КА в ГСК проведённый из начала топоцентрической СК 
	// То есть R = "КА" - "НИП"
	double R[4] ;
	SubtractVector(Gsk, NIP->xyz, R, 3) ;

	// Расчет топоцентрических координат
	double TPC[6] ; memset(TPC, 0, sizeof(TPC)) ;
	// Перевод R из ГСК в топоцентрическую СК с началом в центре НИП
	MMatrVactor(NIP->gsc2tpc, &R[0],   &TPC[0], 3, 3) ;
	// Перевод Скорости КА из ГСК в топоцентрическую СК с началом в центре НИП
	MMatrVactor(NIP->gsc2tpc, &Gsk[3], &TPC[3], 3, 3) ;

	double Z[7] ;
	// Дальность, дткм
	Z[0]=ModVector(TPC, 3);
	// Скорость изменения дальности, дткм/ссс
	Z[1]=(TPC[0]*TPC[3]+TPC[1]*TPC[4]+TPC[2]*TPC[5])/Z[0];
	// Угол места, рад
	R[2]=sqrt(TPC[0]*TPC[0]+TPC[2]*TPC[2]);
	Z[2]=(double)atan2(TPC[1],R[2]);
	// Производная угла места по времени рад/ссс
	Z[3]=(TPC[4]*R[2]-2*TPC[1]*(TPC[0]*TPC[3]+TPC[2]*TPC[5])/R[2])/Z[0];
	// Азимут, рад
	// Необходимо не забыть что азимут отсчитывается по часовой стрелке
	// в отличие от всех других углов!!!!!
	Z[4]=(double)dargum(TPC[0],TPC[2]);
	// Угол эпсилон1, рад
	R[0]=(double)dargum(TPC[2],TPC[1]);
	Z[5]= k_pi-R[0];
	// Угол эпсилон2, рад
	R[1]=sqrt(TPC[1]*TPC[1]+TPC[2]*TPC[2]);
	R[0]=(double)dargum(TPC[0],R[1]);
	Z[6]=k_pi-R[0];

	// Преобразование размерностей
	// Угол места, град
	PZ[0] = TO_GRAD(Z[2]) ;
	// Скорость изменения угла места, град/сек
	PZ[1] = TO_GRAD(Z[3])/k_cbc ;
	// Дальность, км
	PZ[2] = TO_KM(Z[0]) ;
	// Скорость изменения дальности км/сек
	PZ[3] = TO_KMS(Z[1]) ;
	// Азимут, град
	PZ[4] = ValiA(TO_GRAD(Z[4]), 1) ;
	// e1, град
	PZ[5] = TO_GRAD(Z[5]) ;
	// e1, град
	PZ[6] = TO_GRAD(Z[6]) ;
}

//-------------------------------------------------------------------------------
