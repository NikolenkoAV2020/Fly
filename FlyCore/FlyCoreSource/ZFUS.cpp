//---------------------------------------------------------------------------
// ZFUS.cpp
// А. Николенко 03.08.2018
//-----------------------------------------------------------------------------
#include <stdafx.h>
#pragma   hdrstop

//-----------------------------------------------------------------------------
#include <FlyMMath.h>

//-----------------------------------------------------------------------------
#include <FlyCoreSource\\ModType.h>
#include <FlyCoreSource\\ModGlobal.h>
#include <FlyCoreSource\\Z.h>

//-----------------------------------------------------------------------------
// Расчет параметров относительного положения КА, Земли, Луны и Солнца
//-----------------------------------------------------------------------------
// Вход:
//      t     -	время в ссс от 1975 года;
//      GSC[6]-	координаты в ГСК;
//      ASC[6]-	координаты в АСК-2000;
//				ASC может быть равен nullptr, тогда координаты в АСК-2000 вычисляются 			
// Выход:
//      A[ 0] - Угол между направлением на Солнце и ПМГ (высота Солнца) в орбитальной СК
//      A[ 1] - Угол между направлением на Солнце и Горизонтом на поверхности Земли в подспутниковой точке
//      A[ 2] - Производная высоты Солнца в орбитальной СК
//      A[ 3] - Дельта затененности КА Землей (полутень)
//      A[ 4] - Дельта затененности КА Землей (цилиндр.тень)
//      A[ 5] - Дельта затененности КА Землей (полная тень)
//      A[ 6] - Производная угла СОЗ (дельты затененности КА Землей)
//      A[ 7] - Азимут направления на Солнце
//      A[ 8] - Угол между направлением на Солнце и плоскостью орбиты
//      A[ 9] - Угол между направлением на Солнце и плоскостью rOc
//      A[10] - Дельта затененности КА Луной (полутень)
//      A[11] - Дельта затененности КА Луной (цилиндр.тень)
//      A[12] - Дельта затененности КА Луной (полная тень)
//      A[13] - Производная дельты затененности КА Луной
//      A[14] - Косинус угла между нормалью к плоскости орбиты и направлением на Солнце
//      A[15] - Угол Солнце-Объект-Земля
//      A[16] - Угол Солнце-Объект-Освещенный Край Земли
//      A[17] - Угол между направлением на Солнце и нормалью к плоскости орбиты
//      A[18] - Угол между проекцией Солнца на плоскость орбиты и положением КА
//      A[19] - Угол между плоскостью орбиты и плоскостью СОЗ
//      A[20] - Скорость вращения плоскости СОЗ
//-----------------------------------------------------------------------------
int ZFUS(double t, double *GSC, double *ASC2000, double *A)
{
	if (!GSC && !ASC2000) return-1 ;
	int    i, rc=0;
	double vC[3], vT[3], vN[3], vL[3], Cos_vC_vS, Cos_vT_vS, Cos_vC_vN, Sin_H_Sun,
		   dVD_Sun, dVD_Eart, dVD_Moon ; 
	double N_Soz[6], N_Opr[6], dSunKaEart, dSunKaMoon ;
	double ASC[6] ;		// Координаты КА в АСК 
	double nPP[8] ;		// подспутниковая точка в АСК
	double ncZ[10] ;	// Вектор положения и скорости Земли в АСК
	double QS[3] ;		// Координаты Cолнца
	double QM[3] ;		// Координаты Луны
	double ncS[10] ;	// направляющие косинусы Солна  
	double ncM[10] ;	// Направляющие косинусы Луны

	//-------------------------------------------------------------------------
	// Вектор положения и скорости Земли в АСК
	memset(ncZ, 0, 10*sizeof(double));

	//-------------------------------------------------------------------------
	// Вектор положения и скорости Солнца в АСК-2000
	rc = ZSunJ2000(t, QS, TIME1975ASD, false) ; if (rc) return rc ; 
	memcpy(ncS, QS, 3*sizeof(double)) ;
	double Delta = 10./86400.0 ;
	rc = ZSunJ2000(t + Delta, QS, TIME1975ASD, true); if (rc) return rc;
	for (i=0 ; i<3 ; i++) ncS[3+i] = (QS[i]-ncS[i])/Delta ;

	//-------------------------------------------------------------------------
	// Вектор положения и скорости Луны в АСК
	rc = ZMoonJ2000(t, QM, TIME1975ASD, false); if (rc) return rc;
	memcpy(ncM,QM,3*sizeof(double)) ;
	rc = ZMoonJ2000(t + Delta, QM, TIME1975ASD, true); if (rc) return rc;
	for(i=0;i<3;i++) ncM[3+i]=(QM[i]-ncM[i])/Delta ;

	//-------------------------------------------------------------------------
	// Расчет координат КА в АСК
	if (ASC2000) {
		memcpy(ASC, ASC2000, 6*sizeof(double)) ; 
	} else {
		rc = ZGSCtoASC2000(t, GSC, ASC, 0); if (rc) return rc;
	}

	//-------------------------------------------------------------------------
	// Формирование координат и скоростей С, Л и З относительно КА в АСК
	for(i=0 ; i<6 ; i++) { ncS[i]-= ASC[i] ; ncM[i]-= ASC[i] ; ncZ[i]-= ASC[i] ; }

	//-------------------------------------------------------------------------
	// Направляющие косинусы Солнца
	ncS[9] = FR(ncS);
	for(i=0 ; i<3 ; i++) { ncS[6+i] = ncS[i] ; ncS[i]/= ncS[9] ; }

	//-------------------------------------------------------------------------
	// Направляющие косинусы Земли
	ncZ[9] = FR(ncZ);
	for(i=0 ; i<3 ; i++) { ncZ[6+i] = ncZ[i] ; ncZ[i]/= ncZ[9] ; }

	//-------------------------------------------------------------------------
	// Направляющие косинусы Луны
	ncM[9] = FR(ncM);
	for(i=0 ; i<3 ; i++) { ncM[6+i] = ncM[i] ; ncM[i]/= ncM[9] ; }

	//-------------------------------------------------------------------------
	// Расчет угла полураствора видимого диска Солнца
	dVD_Sun  = Asin(k_rcp_c/ncS[9], 0) ;

	//-------------------------------------------------------------------------
	// Расчет угла полураствора видимого диска Земли
	dVD_Eart = k_rcp/ncZ[9];
	if (fabs(dVD_Eart) > 1.0) dVD_Eart/= fabs( dVD_Eart ) ;
	dVD_Eart = Asin(dVD_Eart, 0) ;

	//-------------------------------------------------------------------------
	// Расчет угла полураствора видимого диска Луны
	if(k_rcp_l/ncM[9]>1.) dVD_Moon = 0. ;
	else dVD_Moon = Asin(k_rcp_l / ncM[9], 0);

	//-------------------------------------------------------------------------
	// Расчет угла Солнце-КА-Земля
	dSunKaEart = Acos(scal_pr(ncS, ncZ, 3), 0);

	//-------------------------------------------------------------------------
	// Расчет угла Солнце-КА-Луна
	dSunKaMoon = Acos(scal_pr(ncS, ncM, 3), 0);

	//-------------------------------------------------------------------------
	// A[0] - Высота Солнца над ПМГ в ОСК
	Sin_H_Sun = scal_pr(ncZ, ncS, 3) ;
	A[0] = Acos(Sin_H_Sun, 0) - k_polpi;

	//-------------------------------------------------------------------------
	// A[1] - Высота Солнца над ПМГ на поверхности Земли
	for(i=0 ; i<3 ; i++) { nPP[i] = ASC[i]/ncZ[9] ; nPP[i+3] = QS[i]-nPP[i]*k_rcp ; }
	nPP[6] = FR(&nPP[3]) ;
	for(i=0 ; i<3 ; i++) nPP[i+3]/= nPP[6] ;

	Sin_H_Sun = scal_pr(nPP, &nPP[3], 3) ;
	A[1] = Acos(Sin_H_Sun, 0);

	//-------------------------------------------------------------------------
	// Проекции вектора C - вектора момента количества движения
	wek_pr_norm(ASC, &ASC[3], vC) ;
	// Проекции вектора T - трансверсали орбиты (нормали к плоскости rOC)
	wek_pr_norm(ASC, vC, vT) ;
	// Проекции вектора N - нормали к плоскости Солнце-Объект-Земля
	wek_pr_norm(ASC, ncS, vN) ;

	//-------------------------------------------------------------------------
	// Косинус угла между вектором С и направлением на Солнце
	Cos_vC_vS = scal_pr(vC, ncS, 3) ;
	// Косинус угла между трансверсалью T и направлением на Солнце
	Cos_vT_vS = scal_pr(vT, ncS, 3) ;
	// Косинус угла между вектором С и вектором N
	Cos_vC_vN = scal_pr(vC, vN, 3) ;

	//-------------------------------------------------------------------------
	// A[3] - Дельта для освещенности  объекта (полутень)
	A[3] = dSunKaEart-dVD_Eart-dVD_Sun ;

	//-------------------------------------------------------------------------
	// A[4] - Дельта для освещенности  объекта (цилиндр.тень)
	A[4] = dSunKaEart-dVD_Eart ; //+asin(Wtgk->rcp/ncS[9]);

	//-------------------------------------------------------------------------
	// A[5] - Дельта для освещенности  объекта (полная тень)
	A[5] = dSunKaEart-dVD_Eart+dVD_Sun ;

	//-------------------------------------------------------------------------
	// A[6]  - Производная угла СОЗ
	A[6] =-(scal_pr(&ncZ[3], &ncS[6], 3)+scal_pr(&ncZ[6], &ncS[3], 3))
		   /sqrt(1-Sin_H_Sun*Sin_H_Sun)/ncZ[9]/ncS[9] ;

	//-------------------------------------------------------------------------
	// A[2] - Производная высоты Солнца
	A[2] =-A[6] ;

	//-------------------------------------------------------------------------
	// A[7] - Азимут Солнца (угол между трансверсалью орбиты
	// и проекцией направления КА-Солнце на плоскость местного горизонта)
	A[7] = Acos(Cos_vC_vN, 0);

	//-------------------------------------------------------------------------
	// A[8] - Угол между плоскостью орбиты и направлением на Солнце
	A[8] = Asin(Cos_vC_vS, 0);

	//-------------------------------------------------------------------------
	// A[9] - Угол между трансверсалью T и направлением на Солнце
	A[9] = Acos(Cos_vT_vS, 0);

	//-------------------------------------------------------------------------
	// A[10] - Дельта тени Луны (полутень)
	A[10] = dSunKaMoon-dVD_Moon-dVD_Sun ;

	//-------------------------------------------------------------------------
	// A[11] - Дельта тени Луны (цилиндр.тень)
	A[11] = dSunKaMoon-dVD_Moon ; //+asin(Wtgk->rcp_l/ncS[10]);

	//-------------------------------------------------------------------------
	// A[12] - Дельта тени Луны (полная тень)
	A[12] = dSunKaMoon-dVD_Moon+dVD_Sun ;

	//-------------------------------------------------------------------------
	// A[13] - Производная дельты затененности КА Луной
	A[13] =-scal_pr(&ncM[3], &ncS[6], 3)+scal_pr(&ncM[6], &ncS[3], 3) ;

	//-------------------------------------------------------------------------
	// A[14] - Косинус угла между нормалью к плоскости орбиты и направлением 
	//		   на Солнце (для определения моментов времени прохождения Солнца 
	//		   через плоскость орбиты)
	A[14]=Cos_vC_vS ;

	//-------------------------------------------------------------------------
	// A[15] - Угол Солнце-Объект-Земля
	A[15] = dSunKaEart ;

	//-------------------------------------------------------------------------
	// A[16] - Угол Солнце-Объект-Освещенный Край Земли
	A[16] = dSunKaEart-dVD_Eart ;

	//-------------------------------------------------------------------------
	// A[17] - Угол между направлением на Солнце и нормалью к плоскости орбиты
	A[17] = Acos(Cos_vC_vS, 0);

	//-------------------------------------------------------------------------
	// Угол между проекцией Солнца на плоскость орбиты и положением КА
	// Строим нормаль к плоскости, образ. вектором С и направлением на Солнце
	wek_pr_norm(ncS, vC, ncM) ;
	// Строим единичный вектор проекции Солнца на плоскость орбиты
	wek_pr_norm(vC, ncM, vL) ;
	// Строим нормаль к плоскости, образ. радиус-вектором КА
	//    и проекцией Солнца на плоскость орбиты
	wek_pr_norm(ncZ, vL, ncM) ;

	//-------------------------------------------------------------------------
	// A[18] - Угол между проекцией Солнца на плоскость орбиты и положением КА
	A[18] = scal_pr(vL, ncZ, 3) ;

	if(A[18]>=1.0) A[18] = 0.0 ;
	else	if(A[18] <= -1.0)	A[18] = k_dwapi ;
			else				A[18] = Acos(A[18], 0) ;

	// Корректировка угла A[18]
	A[19]=scal_pr(ncM,vC,3) ;
	if(A[19]>=0.) A[18] = k_dwapi-A[18] ;

	//-------------------------------------------------------------------------
	// A[19] - Угол между плоскостью орбиты и плоскостью СОЗ
	A[19] = A[7];
	if(A[19]>k_polpi) A[19]=k_pi-A[19] ;

	//-------------------------------------------------------------------------
	// A[19] - Скорость вращения плоскости СОЗ в абсолютном пространстве
	wek_pr(&ncZ[6], &ncS[6], N_Opr) ;
	wek_pr(&ncZ[6], &ncS[3], &N_Soz[3]) ;
	wek_pr(&ncZ[3], &ncS[6], &N_Opr[3]) ;
	double ro = FR(N_Opr) ;

	for(i=0 ; i<3 ; i++) N_Soz[i] = (N_Soz[3+i]+N_Opr[3+i])/ro ;
	A[20] = FR(N_Soz) ;

	return 0;
}

//-----------------------------------------------------------------------------
