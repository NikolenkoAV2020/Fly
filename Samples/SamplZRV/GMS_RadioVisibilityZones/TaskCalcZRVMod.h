//-------------------------------------------------------------------------------
// TaskCalcZRVMod.h
// А. Николенко 13.12.2018
//
// Реализация функции реакции на обнаружения моделью движения факта наступления 
// на текущем шаге интегрирования одного из собятий ЗРВ - вход, выход или параметр
//------------------------------------------------------------------------------- 
#ifndef TASK_CALC_ZRV_MOD_H
#define TASK_CALC_ZRV_MOD_H

//-------------------------------------------------------------------------------
// ZModZRV - надстройка над классом модели движения для реакции 
// на факт обнаружения собитий ЗРВ
// 
// Наследование:
//	ZMemoryKeeper      |
//	ZExternalEquations | ===> ZIntegrator ===> ZModKA ===> ZModZRV 
//
// Единственное назначение данного класса - перегрузка виртуального 
// метода OnZRVEvent, вызываемого моделью движения каждый раз когда 
// обнаруживается то или иное событие модели движения
// В остальном это пустыщка
class ZModZRV : public ZMSC {
public:
	ZModZRV() { fp = NULL ; } 
	~ZModZRV(){} 
	// Функции реакции на событие ЗРВ
	virtual int OnZRVEvent(ZMOD_EVENT& E, ZSC_SI* FSC) ;
	// Файл документа с ЗРВ именно для данного КА по всем заданным НИПам
	FILE* fp ;
} ;

//-------------------------------------------------------------------------------
// Структура исходных данных для решения задачи
// рассчёта ЗРВ
typedef struct IDTASKZRV {
long			Vitn ;	      // Начальный виток моделирования 
long			Vitk ;	      // Конечный виток моделирования
int				CountNip ;	  // Колличество НИПов
int				CountKA  ;	  // Колличество КА для которых расчитываются ЗРВ
int*			NumKA ;		  // Номера КА для которы рассчитываются ЗРВ
ZLSF			LSF ;		  // Логическая шкала сил
ZModZRV*		KA ;	      // Модели движения
ZNU*			NU ;	      // Начальные условия
int*			NipIndexes ;  // Индексы НИПов в таблице НИПов	 
FILE**			pfn ;         // Для документирования результатов по отдельным НИП
vector<string>	VFN ;		  // Массив имён файлов с результатами расчётов
int				VarDocZRV ;	  // Вариант документирования ЗРВ
							  //	0 - в три строки: вход, параметр и выход 
							  //	1 - в одну строку 
double			StepTargDir;	 // Шаг расчёта целеуказаний, сек
bool			needCalcTargDir ;// Необходимость целеуказаний для каздой найденной ЗРВ
bool			needForNipFile ; // Необходимость формирования отдельного документа 
								 // для каждого НИП
bool			needForKAFile ;  // Необходимость формирования отдельного документа 
								 // для каждого КА
bool			needZipRezults ; // Необходимость сжимать файлы результатов
} _IDTASKZRV ;

// Функуия расчёта целеуказаний
int CalcTargDir(int NumKA, int NipInd, long Vit, double* Xasc1975, double t1, double t2) ;

//------------------------------------------------------------------------------- 
#endif // #ifndef TASK_CALC_ZRV_MOD_H