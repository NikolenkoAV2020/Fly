//-------------------------------------------------------------------------------
// FlightCalcHightSimplified.cpp
// Прогноз высотного профиля упрощённый
// 
// А. Николенко 14.02.2019
//-------------------------------------------------------------------------------
#include "stdafx.h"

//---------------------------------------------------------------------------
// Компоненты Fly
#include <FlyCore.h>			// Собственоно сама модель движения

//-------------------------------------------------------------------------------
// Прогнозирование изменение максимальных и минимальных высот на витке
// на заданном интервале витков
//		NU		- НУ от которых нужно прогнозировать
//		LSF		- Шкала сил в которой выполняется прогноз
//		maxTime	- Интервал моделирования в сутках
//		SkipVit	- Пропускать витков между витками на которых контролируютсся 
//				  экстремальные высоты
// 
int FlightCalcHightSimplified(ZNU& NU, ZLSF& LSF, char* FilePrintSticker,
							  double maxTime, int SkipVit)
{
	printf("Height frofile Model forcing...\n") ;
	int i, rc = 0 ; 
	int CountStep = 720 ; 

	//---------------------------------------------------------------------------
	// Модель движения КА
	ZMSC KA ;
	// Инициализация модели движения
	rc = KA.Init(NU, &LSF) ; RRC ;

	//---------------------------------------------------------------------------
	// Настройка документирования основного
	// Диспетчер документирования
	ZCPrintManager PrintMng ;
	// Отключить документирование прогноза по виткам
	PrintMng.MPK.FromVitOff() ;
	// Документирование результатов прогноза по строкам (горизонтально)
	PrintMng.MPK.AflatOn() ;
	// Добавление документируемых параметров движения
	//PrintMng.MPK << MODPR_VIT ;
	// Параметризация ПОЛЬЗОВАТЕЛЬСКОГО докумеентирования результатов прогноза.
	// Указыватся: тип параметра, его точность (число знаков после запятой),
	// максимальное колличество символов для представления и название.
	// Значения документируемых параметров задаются далее при помощи
	// функции PMPK.UPP(0).value = ...
	// PrintMng.MPK << ZSUserPrintParam(UPPdouble, 16, 6, "время", "часы") ;
	// PrintMng.MPK.UPP(0).value = 0 ;
	for (i=0 ; i<=CountStep ; i++) {  
		PrintMng.MPK << ZSUserPrintParam(UPPdouble, 16, 6, "h", "км") ;
	}

	// Инициализация документирования

	// Добавляем стикер к имени файла документа
	PrintMng.SetPrintFileSticker(FilePrintSticker) ;
	// Создание документа
	PrintMng.PrePrint(&KA, "Прогноз", "_FlightHProf") ;
	// Заголовок документа
	PrintMng.PrintHeaderDoc("\n   Высотный профиль (FlightCalcHightSimplified)\n\n") ;

	// Документирования НУ
	PrintMng.PrintNU(NU, NULL, 3) ;
	// Документирование логической шкалы сил
	PrintMng.PrintLSF(LSF, 1) ;

	//---------------------------------------------------------------------------
	// Настройка документирования вариаций минимальных и максимальных высот
	ZCPrintManager PrintMngH ;
	PrintMngH.MPK.FromVitOff() ;
	PrintMngH.MPK.AflatOn() ;
	PrintMngH.MPK << ZSUserPrintParam(UPPint,    16, 6, "Виток", "") ;
	PrintMngH.MPK << ZSUserPrintParam(UPPdouble, 16, 6, "Hmin1", "км") ;
	PrintMngH.MPK << ZSUserPrintParam(UPPdouble, 16, 6, "Hmin2", "км") ;
	PrintMngH.MPK << ZSUserPrintParam(UPPdouble, 16, 6, "Hmax1", "км") ;
	PrintMngH.MPK << ZSUserPrintParam(UPPdouble, 16, 6, "Hmax2", "км") ;
	// Добавляем стикер к имени файла документа
	PrintMng.SetPrintFileSticker(FilePrintSticker) ;
	// Создание документа
	PrintMngH.PrePrint(&KA, "Прогноз", "_FlightHminmax") ;
	// Заголовок документа
	PrintMngH.PrintHeaderDoc("\n   Зависимости минимальных/максимальных высот от времени полёта\n   (FlightCalcHightSimplified)\n\n") ;
	// Документирования НУ
	PrintMngH.PrintNU(NU, NULL, 3) ;
	// Документирование логической шкалы сил
	PrintMngH.PrintLSF(LSF, 1) ;

	//---------------------------------------------------------------------------
	// Цыкл моделирования 
	ZSC_SI SI ;
	double U ;
	double du = 360.0/CountStep ; 
	// Первый виток моделирования будет виток следующий 
	// за витком начальных условий
	int    Vit = NU.vit+1 ;
	// Документирование значений аргумента широты для профиля высот
	U = 0 ;
	for(i=0 ; i<=CountStep ; i++) {
		PrintMng.MPK.UPP(i).value = U ;
		U+= du ;
	}
	PrintMng.PrintMSC(&KA, &SI, NULL, NULL) ;

	//---------------------------------------------------------------------------
	// Цикл моделирования движения на заданном интервале
	while(1) {
		// Моделирование до начало текущего витка
		rc = KA.GoToVit(Vit, &SI); if (rc) break;
		printf("\rTime %.1lf from %.1lf  ", SI.ta-NU.t, maxTime) ;
		// Высота для первой точки витка (начало витка)
		PrintMng.MPK.UPP(0).value = SI.THBLFR[1] ;
		// Инициализация отслеживания событий витка (мин и макс высоты)
		KA.RunUpVit() ;
		//-----------------------------------------------------------------------
		// Моделирование движения в пределах ПРИМЕРНО витка 
		// с заданным шагом du по аргументу широты
		U = du ;
		// Цикл моделирования превышающий виток для гарантированого
		// определения 2-х локально минимальных и 2-х
		// локально максимальных высот
		// моделирования прерывается в любом случае м моент когда
		// найдены все 4-е экстремальные высоты
		// Характерной особенностью околокруговых орбит с перицентром
		// в окрестности экватора является то что на витке может быть
		// максимальных или минимальных высот от 1-й до 3-х
		for (int i=1 ; i<=2*CountStep ; i++) {  
			rc = KA.GoToVitU(Vit, U, &SI); if (rc) break;
			if (i<=CountStep) {
				// Пользовательское докумеентирования результатов прогноза.
				// Задаётся значение дополнительного параметра,
				// декларируемого ранее при помощи вызова оператора 
				// PrintMng.MPK << ZSUserPrintParam(UPPdouble...
				PrintMng.MPK.UPP(i).value = SI.THBLFR[1] ;
			}
			U += du ;
			// Проверка обнаружения всех 4-х высот 
			// и одновременно моделирования всего витка
			// Если виток закончен а одна из высот не найдена то
			// будет реализовано 1-2-3 шага интегрирования и найдено ближайшее
			// недостающее значение экстремальной высоты
			if (KA.FV.Hmin.isFind && KA.FV.Hmin2.isFind &&
				KA.FV.Hmax.isFind && KA.FV.Hmax2.isFind &&
				i>=CountStep) {
				break ;
			}
		}
		// Завершение отслеживания событий витка
		KA.CompletVit() ;
		// Если в цикле выше произошла ошибка то текущий цикл 
		// также прекращается
		if (rc) break ;

		// Документирование полученных параметров движения
		// Записывается в документ одна строка профиля высот
		PrintMng.PrintMSC(&KA, &SI, NULL, NULL) ;

		//-----------------------------------------------------------------------
		// Документирование результатов рассчёта экстремальных высот
		if (KA.FV.Hmin.ute>100.0 && KA.FV.Hmin.ute<260.0) {
			ZSC_VP HM   = KA.FV.Hmin ;
			KA.FV.Hmin  = KA.FV.Hmin2 ;
			KA.FV.Hmin2 = HM ;
		}
		PrintMngH.MPK.UPP(0).value = Vit ;
		PrintMngH.MPK.UPP(1).value = KA.FV.Hmin.H ; 
		PrintMngH.MPK.UPP(2).value = KA.FV.Hmin2.H ; 
		PrintMngH.MPK.UPP(3).value = KA.FV.Hmax.H ; 
		PrintMngH.MPK.UPP(4).value = KA.FV.Hmax2.H ; 
		PrintMngH.PrintMSC(&KA, &SI, NULL, NULL) ;

		//-----------------------------------------------------------------------
		// Проверка условия завершения численного интегрирования (прогноза)
		if (SI.ta > NU.t+maxTime) break ;

		//-----------------------------------------------------------------------
		// Увеличение номера витка
		Vit++ ;
		// Пропукаем SkipVit витков
		Vit+= SkipVit ;
	}
	printf("\n");

	//---------------------------------------------------------------------------
	// Завершение документирования
	PrintMng.PostPrint(); 
	PrintMng.ClosePrint();
	PrintMngH.PostPrint(); 
	PrintMngH.ClosePrint();

	return rc ;
}

//-------------------------------------------------------------------------------
