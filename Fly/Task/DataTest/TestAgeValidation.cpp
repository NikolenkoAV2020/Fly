//-----------------------------------------------------------------------------
// TestAgeValidation.cpp
// Пример программы расчёта трассы полёта КА
//
// А. Николенко 25.04.2019
//-----------------------------------------------------------------------------
#include "stdafx.h"

//-----------------------------------------------------------------------------
// Компоненты Fly
#include <FlyCore.h>		// Модель движения

//-----------------------------------------------------------------------------
int TestAgeValidation()
{
	char NameNU1975[] = "NU01_314_Sverka_4_ASK1975.txt";
	char NameNU2000[] = "NU01_314_Sverka_4_ASK2000.txt";
	char NameNU0000[] = "NU01_314_Sverka_4_ASKTE.txt";
	//char NameNU1975[] = "NU01_268_Sverka_4_0004.txt";
	//char NameNU2000[] = "NU01_268_Sverka_4_0005.txt";
	//char NameNU0000[] = "NU01_268_Sverka_4_0003.txt";

	cout << endl << endl
		<< "  Сверка расчёта параметров прецессии и нутации"
		<< endl
		<< "  посреством трансформации НУ в различные эпохи и сравнения"
		<< endl
		<< "  полученного результата с эталоном"
		<< endl << endl;


	int rc = 0;
	// НУ 
	ZNU NU1, NU2, NU3;

	// Загрузка НУ из УОФ НУ01 

	// НУ в АСК 2000
	cout << "  Загрузка НУ полученных из независимого источника, принимаемого"
		 << endl
		 << "  достоверным источником прецезионной баллистической информации."
		 << endl << endl;
	cout << "  НУ1:" << endl;
	rc = LoadNU01(NameNU2000, NULL, NULL, NU1, nullptr, true);
	if (rc) return rc;
	NU1.M0 = 420.0;
	NU1.MF = 50.0;
	DATETIMEDMB DT; 
	DT << NU1.t;

	// НУ в АСК 1975
	cout << "  НУ2:" << endl;
	rc = LoadNU01(NameNU1975, NULL, NULL, NU2, nullptr, true);
	if (rc) return rc;
	NU2.M0 = 420.0;
	NU2.MF = 50.0;
	DT << NU2.t;

	// НУ в АСК ТЕ
	cout << "  НУ3:" << endl;
	rc = LoadNU01(NameNU0000, NULL, NULL, NU3, nullptr, true);
	if (rc) return rc;
	NU3.M0 = 420.0;
	NU3.MF = 50.0;
	DT << NU3.t;
	cout << endl;

	ZNU NU11;
	NU11 = NU1;
	// Преобразование НУ из АСК эпохи 2000 в АСК ТЕ
	ConvertSkNu(NU11, _SK_ASKTE);
	cout << "     АСК 2000 ---> АСК ТЕ" << endl;
	cout << "     Отклонения НУ трансформированных проверяемым СМПО от НУ,"
		 << endl
		 << "     заданных в АСК ТЕ и полученных из независимого"
		 << endl
		 << "     прецезионного источника"
		 << endl << endl;
	double dX[6];
	int    i;
	for (i = 0; i < 3; ++i) {
		// Отклонения координат в сантиметрах
		dX[i] = (NU11.X[i] - NU3.X[i])*1e9;
		// Отклонения скоростей в мм/сек
		dX[i + 3] = TO_KMS(NU11.X[i + 3] - NU1.X[i + 3])*1e6;
	}
	for (i = 0; i < 6; ++i) {
		cout << "     " << (i < 3 ? "[cм]    " : "[мм/сек]") << dX[i] << endl;
	}
	cout << endl;
	
	ZNU NU31;
	NU31 = NU3;
	// Преобразование НУ из АСК эпохи ТЕ в АСК 1975
	ConvertSkNu(NU31, _SK_ASK1975);
	cout << "     АСК TE ---> АСК 1975" << endl;
	cout << "     Отклонения НУ трансформированных проверяемым СМПО от НУ,"
		 << endl
		 << "     заданных в АСК 1975 и полученных из независимого" 
		 << endl
		 << "     прецезионного источника"
		 << endl << endl;
	for (i = 0; i < 3; ++i) {
		// Отклонения координат в сантиметрах
		dX[i] = (NU31.X[i] - NU2.X[i])*1e9;
		// Отклонения скоростей в мм/сек
		dX[i + 3] = TO_KMS(NU31.X[i + 3] - NU2.X[i + 3])*1e6;
	}
	for (i = 0; i < 6; ++i) {
		cout << "     " << (i < 3 ? "[cм]    " : "[мм/сек]") << dX[i] << endl;
	}
	cout << endl;

	NU11 = NU1;
	// Преобразование НУ из АСК эпохи 2000 в АСК 1975
	ConvertSkNu(NU11, _SK_ASK1975);
	cout << "     АСК 2000 ---> АСК 1975" << endl;
	cout << "     Отклонения НУ трансформированных проверяемым СМПО от НУ,"
		<< endl
		<< "     заданных в АСК 1975 и полученных из независимого"
		<< endl
		<< "     прецезионного источника"
		<< endl << endl;
	for (i = 0; i < 3; ++i) {
		// Отклонения координат в сантиметрах
		dX[i] = (NU11.X[i] - NU2.X[i])*1e9;
		// Отклонения скоростей в мм/сек
		dX[i + 3] = TO_KMS(NU11.X[i + 3] - NU2.X[i + 3])*1e6;
	}
	for (i = 0; i < 6; ++i) {
		cout << "     " << (i < 3 ? "[cм]    " : "[мм/сек]") << dX[i] << endl;
	}
	cout << endl;

	return 0;
}

//-----------------------------------------------------------------------------