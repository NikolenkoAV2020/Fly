//---------------------------------------------------------------------------
// ZAvrE0.cpp
// А. Николенко 03.08.2018
//---------------------------------------------------------------------------
#include <stdafx.h>
#pragma   hdrstop

//---------------------------------------------------------------------------
// Компоненты Fly
#include <FlyMMath.h>	// Математические функции
#include <FlyTime.h>	// Всё про время
#include <FlySofa.h>	// Функции фундаментальной астрономии

//---------------------------------------------------------------------------
#include <FlyCoreSource\\ModType.h>
#include <FlyCoreSource\\ModGlobal.h>
#include <FlyCoreSource\\ZCalc.h>
#include <FlyCoreSource\\ZAvrE0.h>

//----------------------------------------------------------------------------
// Расчет наклона среднего земного экватора к эклиптике (результат в угл.сек.)
// timeKey:
//	0 - tau задано в ссс от J2000 (0h 01.01.2000)
//	1 - tau задано в ссс от J1975 (0h 01.01.1975)
//	2 - tau задано в юлианских столетиях от J2000 (12h 01.01.2000)
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// Расчет среднего наклона эклиптики к экватору по локально реализованной 
// модели рекомендованной международным астрономическим союзом в 2006 году.
// Mean obliquity of the ecliptic, IAU 2006 precession model.
// Она же представлена в соглашении IERS 2009 года.
double ZAverageE0IERS2009(double t, TIMESCALE Scale)
{
    t = Astro2000Time(t, Scale, nullptr) ;
    return ((((-4.34e-8*t-5.76e-7)*t+0.0020034)*t-0.0001831)*t-46.836769)*t+84381.406;
}

//----------------------------------------------------------------------------
// Расчет среднего наклона эклиптики к экватору по локально реализованной 
// модели рекомендованной IAU в 2003 году.
// Модель представленная в соглашении IERS 2003 года
double ZAverageE0IERS2003(double t, TIMESCALE Scale)
{
    t = Astro2000Time(t, Scale, nullptr) ;
    return ((0.001813*t-0.00059)*t-46.84024)*t+84381.448;
}

//----------------------------------------------------------------------------
// Расчет среднего наклона эклиптики к экватору по локально реализованной 
// модели представленной в РД-50.. это модель рекомендованная
// международным астрономическим союзом в 1980 году
// Mean obliquity of the ecliptic, IAU 1980 model.
double ZAverageE0RD50(double t, TIMESCALE Scale)
{
	t = Astro2000Time(t, Scale, nullptr) ;
	return ((0.001813*t-0.00059)*t-46.815)*t+84381.448;
}

//----------------------------------------------------------------------------
// Расчет среднего наклона эклиптики к экватору при помощи библиотеки SOFA.
// SOFA это Open Source бибилиотека, реализующая алгоритмы рекомендованные
// международным астрономическим союзом IAU, и свободно распростроняемая. 
// Результат в угловых секундах.
// Единственной проблемой данной функции является необходимость подать 
// на вход библиотеке правильное время в нужном формате. Для этого 
// используется разработанный класс универсаьного времени TheTimes
//----------------------------------------------------------------------------
double ZAverageE0LikeSOFA(double t, TIMESCALE Scale, MODEL_AVERAGE_E0 ModAvrE0)
{
	// Преобразование времени в масштаб юлианских столетий
	// отсчитаннных от астрономической эпохи 2000 года
	double ta ;
	Astro2000Time(t, Scale, &ta) ;
	// "Двойное" время
	// Вычитается 0.5 для учёта разницы начала эпохи J1975 (12h)
	// и начала отсчёта времени от 1975 года (0h)
	TheDblTime Dblt = ta-0.5 ; 
	// Пересчёт в юлианскую дату
	Dblt+= TheT_JD1975 ;
	// Универсальное время 
	TheTimes TheT ; 
	TheT.fromIAT(Dblt) ;

	double e0 ;
	switch(ModAvrE0) {
		case AVRE0IAU1980: e0 = iauObl80(TheT.TT.D1(), TheT.TT.D2()); break ;
		case AVRE0IAU2006: e0 = iauObl06(TheT.TT.D1(), TheT.TT.D2()); break ;
		default: assert(0) ;
	}

	e0*= 180/k_pi*3600.0 ;
	return e0 ;
}

//----------------------------------------------------------------------------
// Расчет среднего наклона эклиптики к экватору 
// по одной из моделей указанной в параметре ModAvrE0
double ZAverageE0(double t, TIMESCALE Scale, MODEL_AVERAGE_E0 ModAvrE0)
{
	// Перевод времени в шкалу юлианских столетий отсчитываемое от
	// астрономической эпохи 2000 года
	double ta ;	t = Astro2000Time(t, Scale, &ta) ;
	// Расчёт наклона в соответствии с заданной параметром ModAvrE0
	// моделью
	switch(ModAvrE0) {
		case AVRE01980:
			return ZAverageE0RD50(t, TIMEJ2000JC);
		case AVRE02003:
			return ZAverageE0IERS2003(t, TIMEJ2000JC);
		case AVRE02009:
			return ZAverageE0IERS2009(t, TIMEJ2000JC);
		case AVRE0IAU1980:
		case AVRE0IAU2006:
			return ZAverageE0LikeSOFA(ta, TIME1975ASD, ModAvrE0) ;
		default: assert(0) ;
	}
	return 0 ;
}

//----------------------------------------------------------------------------