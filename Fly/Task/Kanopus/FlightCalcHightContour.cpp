//-------------------------------------------------------------------------------
// FlightCalcHightContour.cpp
// Прогноз высотного профиля
//
// А. Николенко 14.02.2019
//-------------------------------------------------------------------------------
#include "stdafx.h"

//---------------------------------------------------------------------------
// Компоненты Fly
#include <FlyCore.h>			// Собственоно сама модель движения

//-------------------------------------------------------------------------------
// Построение высотного профиля как функции двух переменных - аргумента широты и
// витка полёта.
//		NU	-	НУ от которых нужно прогнозировать
//		LSF	-`	Шкала сил в которой выполняется прогноз
//		dVit-	Интервал витков прогнозирования на котором расчитывается профиль
//
int FlightCalcHightContour(ZNU& NU, ZLSF& LSF, int dVit, char* FilePrintSticker)
{
	printf("Height frofile Model forcing...\n") ;
	int rc = 0 ; 

	// Осуществляется расчет драконического периода   
	// путем прогнозирования движения МКА в принятой модели движения.
	// Модель движения КА
	ZMSC KA ;
	// Инициализация модели движения
	rc = KA.Init(NU, &LSF) ; RRC ;

	int CountStep = 180 ; 

	// Диспетчер документирования
	ZCPrintManager PrintMng ;
	// Отключить документирование прогноза по виткам
	PrintMng.MPK.FromVitOff() ;
	// Документирование результатов прогноза по строкам (горизонтально)
	PrintMng.MPK.AflatOn() ;
	// Добавление документируемых параметров движения
	//PrintMng.MPK << MODPR_VIT ;
	// Параметризация ПОЛЬЗОВАТЕЛЬСКОГО докумеентирования результатов прогноза.
	// Указыватся: тип параметра, его точность (число знаков после запятой),
	// максимальное колличество символов для представления и название.
	// Значения документируемых параметров задаются далее при помощи
	// функции PMPK.UPP(0).value = ...
	// PrintMng.MPK << ZSUserPrintParam(UPPdouble, 16, 6, "время", "часы") ;
	// PrintMng.MPK.UPP(0).value = 0 ;
	for (int i=0 ; i<CountStep+1 ; i++) {  
		PrintMng.MPK << ZSUserPrintParam(UPPdouble, 16, 6, "h", "км") ;
	}

	// Инициализация документирования
	// Добавляем стикер к имени файла документа
	PrintMng.SetPrintFileSticker(FilePrintSticker) ;
	// Создание документа
	PrintMng.PrePrint(&KA, "Прогноз", "_FlightKanopusHightContour") ;
	// Заголовок документа
	PrintMng.PrintHeaderDoc("\n Прогноз параметров движения КА (FlightKanopus)\n") ;

	// Документирования НУ
	PrintMng.PrintNU(NU, NULL, 3) ;
	// Документирование логической шкалы сил
	PrintMng.PrintLSF(LSF, 1) ;

	// Цыкл моделирования 
	ZSC_SI SI ;
	double U ;
	double du = 360.0/CountStep ; 
	int    Vitn = NU.vit+1 ;
	int    Vit  = Vitn ;
	int    Vitk = Vitn + dVit ;
	// Прогноз до начального витка
	rc = KA.GoToVit(Vitn, &SI); RRC;
	// Цикл моделирования движения по виткам
	while(1) {
		printf("\rTurn %d from %d   ", Vit-Vitn+1, dVit) ;
		// Высота для первой точки витка (начало витка)
		PrintMng.MPK.UPP(0).value = SI.THBLFR[1] ;
		U = du ;
		// Моделирование движения в пределах витка с заданным шагом du
		// по аргументу широты
		for (int i=1 ; i<CountStep ; i++) {  
			rc = KA.GoToVitU(Vit, U, &SI); if (rc) break;
			// Пользовательское докумеентирования результатов прогноза.
			// Задаётся значение дополнительного параметра,
			// декларируемого ранее при помощи вызова оператора 
			// PrintMng.MPK << ZSUserPrintParam(UPPdouble...
			PrintMng.MPK.UPP(i).value = SI.THBLFR[1] ;
			U += du ;
		}
		// Если в цикле выше произошла ошибка то текущий цикл 
		// также прекращается
		if (rc) break ;
		// Увеличение номера витка
		Vit++ ;
		// Моделирование до начала следующего (конец текущего) витка
		rc = KA.GoToVit(Vit, &SI); if (rc) break;
		PrintMng.MPK.UPP(CountStep).value = SI.THBLFR[1] ;
		// Документирование полученных параметров движения
		// Высота для последней точки витка (конец витка)
		PrintMng.PrintMSC(&KA, &SI, NULL, NULL) ;
		// Проверка условия завершения численного интегрирования (прогноза)
		if (Vit==Vitk) break ;
	}
	printf("\n") ;
	// Завершение документирования
	PrintMng.PostPrint(); 
	PrintMng.ClosePrint();

	return rc ;
}

//-------------------------------------------------------------------------------
