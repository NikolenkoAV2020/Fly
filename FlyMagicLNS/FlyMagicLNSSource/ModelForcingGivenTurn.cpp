//-------------------------------------------------------------------------------
// ModelForcingGivenTurn.cpp : 
// А. Николенко 12.10.2018
//
//	 Выход на начало заданного витка - начальные параметры движния 
//	 на заданный виток. Моделирование данного витка
//-------------------------------------------------------------------------------
#include <stdafx.h>

//---------------------------------------------------------------------------
// Компоненты Fly
#include <FlyMMath.h>		// Математические функции
#include <FlyCore.h>		// Ядро модели движения КА
#include <FlyMagicLNS.h>	// Модель маневрирования, метод уздловых точек

//-------------------------------------------------------------------------------
int	ModelForcingGivenTurn(
	ZCLnsNpmJob& MZ,		// Исходные данные для решения задачи манёвра	 
	ZMSC&   KA,		// Модель движения КА
	long    vz,		// Заданный виток, который подлежит моделированию
	ZSC_SI& SI,		// Элементы движения КА на момент начала витка
	ZSC_VI& VI,		// Интегральные характеристики движения КА вдоль витка	
	ZSLoopFact& PN)	// Характеристики движения на заданном витке, используемые в
{					// далее в решении задче выбора параметров программы 
					// управления движением КА.
	int rc;
	// Моделирование движения до начала заданного витка
	rc = KA.GoToVit(vz); RRC; 
	// Параметры движения на момент начала витка
	memcpy(&SI, &KA.FSR, sizeof(SI));

	// Если задана характерная точка на витке
	// То моделируется движение до заданного момента времени на витке 
	// после чего состояние модели движения восстанавливается на момент 
	// начала витка
	if (MZ.Contu()) {
		// Сохранение состояния модели на начало витка 
		int HS = KA.Story();
		// Моделирование до заданного момента времени (до характерной точки).
		PN.tp = MZ.PARt();
		rc = KA.GoToTime(PN.tp); RRC;
		// Аргумент широты характерной точки
		PN.up = TO_GRAD(KA.FSR.OSKTE[5]);
		// Восстановление состояния модели
		KA.ReStory(HS);
		// Освобождение русурса памяти задействованного для сохранения 
		// состояния модели движения.
		KA.FreeStory(&HS);
	}

	// Моделирование движения вдоль заданного витка
	rc = KA.GoAlongVit(vz, _SK_ASKTE); RRC;
	// Интегральные параметры движения вдоль витка
	memcpy(&VI, &KA.FV, sizeof(VI));
	PN << &KA.FV; 
	return 0;
}

//-------------------------------------------------------------------------------